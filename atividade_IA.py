# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oiMC-SjV_MFn1biSJfCwOxOZHEvD0IAf

Brayan,Guilherme e Mátias

Primeiro modelo gan de IA. É utilizado para aprendizado de máquina para gerar novos dados semelhantes á um conjunto de dados de treinamento.
"""

#Importando as blibiotecas que vou usar
import tensorflow as tf
from tensorflow.keras import layers

#função para criar um gerador
def build_generator(latent_dim, output_shape):
  model = tf.keras.Sequential()
  model.add(layers.Dense(256, input_dim=latent_dim, activation="relu"))
  model.add(layers.BatchNormalization())
  model.add(layers.Dense(512, activation="relu"))
  model.add(layers.BatchNormalization())
  model.add(layers.Dense(1024, activation="relu"))
  model.add(layers.BatchNormalization())
  model.add(layers.Dense(output_shape, activation="tanh"))
  return model

#função para criar o discriminador
def build_discriminator(input_shape):
    model = tf.keras.Sequential()
    model.add(layers.Dense(1024, input_shape=(input_shape), activation="relu"))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(512, activation="relu"))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(256, activation="relu"))
    model.add(layers.Dropout(0.3))
    model.add(layers.Dense(1, activation= "sigmoid"))
    return model

#função modelo gan
def build_gan(generator , discriminator):
  discriminator.trainable = False
  model = tf.keras.Sequential()
  model.add(generator)
  model.add(discriminator)
  return model

#dimenções
latent_dim = 100
output_shape = (28, 28, 1)

#criando as intâncias
generator = build_generator(latent_dim, 784)
discriminator = build_discriminator(output_shape)
gan = build_gan(generator, discriminator)

#compilações
#generator.compile(loss="binary_crossentropy", optimizer = "adam")
discriminator.compile(loss = "binary_crossentropy", optimizer = "adam", metrics=["accuracy"])
gan.compile(loss="binary_crossentropy", optimizer ="adam")

"""Este código uma vez treinado pode gerar novos que parecem pertercer ao mesmo conjunto de dados que foi usado para treinamento, como imagens que se assemelha a digitos manuscritos (por exemplo, MNIIST)"""

